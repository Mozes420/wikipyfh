{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"wordinfo.py","provenance":[],"authorship_tag":"ABX9TyO+05pgtQJe7UYVTceu2njy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install wikipedia"],"metadata":{"id":"BeiFI7bDLWm8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import requests\n","import wikipedia\n","import nltk\n","nltk.download('punkt')\n","nltk.download('averaged_perceptron_tagger')\n","nltk.download('maxent_ne_chunker')\n","nltk.download('words')\n","import re\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import matplotlib as mpl"],"metadata":{"id":"rpEVzSqvLCj0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Funktion zum Erhalten der Wikipedia-URL, erlaubt bis zu 2 Tippfehler und wirft bestes Ergebnis aus: \n","\n","def getURL(keyword):\n","  S = requests.Session()\n","  URL = \"https://en.wikipedia.org/w/api.php\"\n","  PARAMS = {\n","    \"action\": \"opensearch\",\n","    \"search\": keyword,\n","    \"limit\": \"1\",\n","    \"format\": \"json\", \n","    'profile': 'fuzzy'\n","    }\n","  R = S.get(url=URL, params=PARAMS)\n","  got = R.json()\n","  wikititle = got[3]\n","  wt1 = ''.join(str(e) for e in wikititle)\n","  #print(wt1)\n","  return wt1"],"metadata":{"id":"h0Nk2S7dK1D9","executionInfo":{"status":"ok","timestamp":1642578435948,"user_tz":-60,"elapsed":398,"user":{"displayName":"Nina Pasku","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16458151178381650551"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["wikiurl = getURL('natural language processin')"],"metadata":{"id":"NBM5fE8wLINl","executionInfo":{"status":"ok","timestamp":1642578436347,"user_tz":-60,"elapsed":3,"user":{"displayName":"Nina Pasku","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16458151178381650551"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["# vereinfachte Funktion zum Erhalten des reinen Seitentextes (ohne Rücksichtnahme auf Formeln, Verweise etc. -> werden mit NLTK-Funktion in Folge entfernt)\n","\n","def getBlankText(keyword):\n","  url = getURL(keyword)\n","  x = url.split(sep=\"/\", maxsplit=-1)[-1:]\n","  page = wikipedia.page(x[-1:])\n","  content = page.content.replace('\\n', '')\n","  print(page)\n","  print(content[0:50],'...')\n","  return content"],"metadata":{"id":"QS0vs3UlLSB8","executionInfo":{"status":"ok","timestamp":1642578437160,"user_tz":-60,"elapsed":1,"user":{"displayName":"Nina Pasku","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16458151178381650551"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["page1 = getBlankText('natural langage processing')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iI8VsE5_MROs","executionInfo":{"status":"ok","timestamp":1642578441259,"user_tz":-60,"elapsed":1349,"user":{"displayName":"Nina Pasku","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16458151178381650551"}},"outputId":"ad802fe0-4c05-42c9-8437-8fa54d403f9c"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["<WikipediaPage 'Natural language processing'>\n","Natural language processing (NLP) is a subfield of ...\n"]}]},{"cell_type":"code","source":["# Funktion zum Erhalten der Vokabeldichte, inkl. Ausschließen von Sonderzeichen, Abkürzungen, Füllwörtern etc. via NLTK\n","\n","def getVD(keyword):\n","  url = getURL(keyword)\n","  text = getBlankText(keyword)\n","  tokens = nltk.word_tokenize(text)\n","  tagged = nltk.pos_tag(tokens)\n","  nn = []\n","  ok = 'NN' \n","  for i in tagged:\n","    if ok == i[1]:\n","      nn.append(i[0])\n","  nn1 = [re.sub('[^a-zA-Z0-9]+', '', _) for _ in nn]\n","  nn2 = []\n","  for i in nn1:\n","    if len(i) > 2:\n","      nn2.append(i)\n","  VD = len(np.unique(nn2)) / len(nn2)\n","  print('vocabulary density: ', VD)\n","  return VD"],"metadata":{"id":"A2XxuHB8MWeN","executionInfo":{"status":"ok","timestamp":1642581883663,"user_tz":-60,"elapsed":437,"user":{"displayName":"Nina Pasku","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16458151178381650551"}}},"execution_count":76,"outputs":[]},{"cell_type":"code","source":["getVD('natural language processing')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uV3hexvgQ1WC","executionInfo":{"status":"ok","timestamp":1642578751523,"user_tz":-60,"elapsed":2165,"user":{"displayName":"Nina Pasku","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16458151178381650551"}},"outputId":"6179097d-3a0a-462d-936a-4781b29e0a17"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["<WikipediaPage 'Natural language processing'>\n","Natural language processing (NLP) is a subfield of ...\n","vocabulary density:  0.4387019230769231\n"]}]},{"cell_type":"code","source":["# Funktion zum Erhalten der Wörter pro Satz; \n","\n","##### TODO: Kontrolle, ob weitere Satzenden definiert werden müssen #####\n","\n","def getWPS(keyword):\n","  url = getURL(keyword)\n","  text = getBlankText(keyword)\n","  words = text\n","  sentences = [[]]\n","  ends = set(\".?!;\")\n","  for word in words:\n","    if word in ends: sentences.append([])\n","    else: sentences[-1].append(word)\n","  if sentences[0]:\n","    if not sentences[-1]: sentences.pop()\n","    wps = sum(len(s) for s in sentences)/len(sentences)\n","    print(\"average words per sentence: \", wps)\n","    return wps"],"metadata":{"id":"4Cgmrr3ORGij","executionInfo":{"status":"ok","timestamp":1642581887382,"user_tz":-60,"elapsed":504,"user":{"displayName":"Nina Pasku","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16458151178381650551"}}},"execution_count":77,"outputs":[]},{"cell_type":"code","source":["getWPS('natural language processin')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kAIQvjJxUGlZ","executionInfo":{"status":"ok","timestamp":1642578732189,"user_tz":-60,"elapsed":1917,"user":{"displayName":"Nina Pasku","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16458151178381650551"}},"outputId":"2e85379f-9822-465c-a5a7-17ec188bfe1c"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["<WikipediaPage 'Natural language processing'>\n","Natural language processing (NLP) is a subfield of ...\n","average words per sentence:  114.7243816254417\n"]}]},{"cell_type":"code","source":["# Funktion zum Plotten von wps und vd \n","\n","##### TODO: evtl. noch Radius normalisiert darstellen, im Moment noch durch Kommaverschiebung gelöst #####\n","\n","def getWordPlot(keyword):\n","  VD = getVD(keyword)\n","  wps = getWPS(keyword)\n","\n","  fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(8, 4)) \n","  [axi.set_axis_off() for axi in ax.ravel()]\n","\n","  cmap = mpl.cm.cool\n","  norm = mpl.colors.Normalize(vmin=0, vmax=5)\n","\n","  ax[0,0] = fig.add_subplot()\n","  wpscircle = plt.Circle((0.1, 0.1 ), radius=wps/10, fill=True, color = cmap(norm(wps/10)))\n","  ax[0,0].add_patch(wpscircle)\n","  label = ax[0,0].annotate('WpS', xy = (0.1, 0.1), fontsize = 15, ha='center')\n","  ax[0,0].set_aspect(1)\n","  ax[0,0].autoscale_view()\n","  ax[0,0].axis('off')\n","\n","  ax[0,1] = fig.add_subplot()\n","  vdcircle = plt.Circle((10.1, 0.1 ), radius=VD*10, fill=True, color = cmap(norm(VD*10)))\n","  ax[0,1].add_patch(vdcircle)\n","  label = ax[0,1].annotate('VD', xy = (10.1, 0.1), fontsize = 15, ha='center')\n","  ax[0,1].set_aspect(1)\n","  ax[0,1].autoscale_view()\n","  ax[0,1].axis('off')\n","\n","  fig, ax = plt.subplots(figsize=(8, 0.5))\n","  fig.subplots_adjust(bottom=0.5)\n","\n","  cbar = fig.colorbar(mpl.cm.ScalarMappable(norm=norm, cmap=cmap),cax=ax, orientation='horizontal')\n","\n","  cbar.set_ticks(np.arange(0, 10, 2.5))\n","  cbar.set_ticklabels(['low', 'medium', 'high'])\n","\n","  plt.show()"],"metadata":{"id":"3zLJ11lIUJSy","executionInfo":{"status":"ok","timestamp":1642581897071,"user_tz":-60,"elapsed":403,"user":{"displayName":"Nina Pasku","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16458151178381650551"}}},"execution_count":78,"outputs":[]},{"cell_type":"code","source":["getWordPlot('natural language processing')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":442},"id":"sosrv85Igbrf","executionInfo":{"status":"ok","timestamp":1642581902562,"user_tz":-60,"elapsed":3878,"user":{"displayName":"Nina Pasku","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16458151178381650551"}},"outputId":"08a905c4-65b9-4724-bc70-042764be9134"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["<WikipediaPage 'Natural language processing'>\n","Natural language processing (NLP) is a subfield of ...\n","vocabulary density:  0.4387019230769231\n","<WikipediaPage 'Natural language processing'>\n","Natural language processing (NLP) is a subfield of ...\n","average words per sentence:  114.7243816254417\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:21: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x288 with 5 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAeAAAAAtCAYAAAB21bhLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAFBElEQVR4nO3dX4hc5RnH8e9PC0a0WDStiLSE0oKKqMVYEFQoiAQRC9oa2suACIKtF0HEiyK2vepFSkGkFawXLUovGiq1VLElTVBK/lRNjDG1ZvVCNLLtTWNrapPHi3MCkzXZndmZ3Xc2+/3AMmfmPed5n92dd55z3jlnJlWFJElaXme1TkCSpNXIAixJUgMWYEmSGrAAS5LUgAVYkqQGLMCSJDXwmXEDZMOGYnb20w391U2Zb+Mh1zlt+8AVVKdcZ84VVpNYp2k/05TLhPtZ9HNgoRgr+H8z9c+BJchlvn4m8VoyTA7DrDMNf49J9jNNuYzbz5I+T3p72PNcVW2YL8wwxi7AzM6SXbsBSHU/J5bn3q7ktmnIYZrapiGHldI2DTlMU9s05DBNbdOQwzS1TUMOC7aRtUyAU9CSJDVgAZYkqQELsCRJDViAJUlqwAIsSVIDFmBJkhqwAEuS1IAFWJKkBizAkiQ1YAGWJKkBC7AkSQ1YgCVJaiBVNV6A5DXgo8mkI2kEa4FTfBWZpCW2pqquHDfI+N+GBB9V1foJxJE0giS7HXvS8kuyexJxnIKWJKkBC7AkSQ1MogD/YgIxJI3OsSe1MZGxN/ZJWJIkaXROQUuS1MCCBTjJkeVIRNLwkmxLsr5f/kOSz7XOSVrpkqzrL62d+/gjSW5eYNuHk2wepb9JXIYkqaGqurV1DtKZrKp+sBRxh56CTucnSV5Lsi/Jxv7xR5Pc3i9vTfJEv7wpyY+XImlpJer3rt9I8mSSvyf5dZKbk7yY5M0kX09yXpInkuxM8nKSb/bbnpvk6SQHkmwFzh2I+3aStXP33pNsTvJwv7wtyZYku/sY1yX5bd/vj5b7byFNsbOTPJ5kf5Ln+7H3ZJJvASS5tR/He5L8LMnvB7a9oh9rh5J8b6GORjkCvgO4Bria7hN4diXZDuwAbgSeAS4FLunXvxF4eoT40mrwFeDbwCZgF/Bd4AbgduAh4HXgz1W1qZ9W3pnkBeAe4D9VdXmSq4C/LaLv/1XV+iTfB34HXAv8C3gryZaq+ue4v5x0Bvgq8J2qujvJb4A7TzQkWQP8HLipqmaSPDVn28uAbwCfBQ4meayqPj5dR6OchHUD8FRVHauqw8BfgOvoC3CSK+hePA4nuQS4HnhphPjSajBTVfuq6jiwH/hTdZci7APWAbcADyZ5BdgGrAG+BNwE/AqgqvYCexfR9zP97T5gf1W9V1VHgUPAFxf9G0lnlpmqeqVf3kM3Lk+4DDhUVTP9/bkF+NmqOlpVs8AHwMXzdTT2e8BV9W6/p74B2A5cCNwFHKmqf48bXzrDHB1YPj5w/zjdeDwG3FlVBwc3SjJM7P9z8k71mtP0PdjvYN+STh4bxxh4u2cR2847rkY5At4BbExydpLP0+2R7+zb/grcT1eAdwCb+1tJo3kOuC99xU3ytf7x7XTT1SS5ErjqFNseBr6Q5KIk5wC3LUO+0mpyEPhyknX9/Y3jBBtlr3cr3bTyq0ABD1TV+33bDuCWqvpHknfojoItwNLofgj8FNib5Cxghq6QPgb8MskB4ADd1NhJqurjJI/Q7Ri/C7yxbFlLq0BV/TfJvcAfk3xIdx7HovlJWJIkDSnJ+VV1pJ+lehR4s6q2LCaWn4QlSdLw7u5PktwPXEB3VvSieAQsSVIDHgFLktSABViSpAYswJIkNWABliSpAQuwJEkNWIAlSWrgEwSYVjCA99i0AAAAAElFTkSuQmCC\n","text/plain":["<Figure size 576x36 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[""],"metadata":{"id":"U7Eb25oqgfse"},"execution_count":null,"outputs":[]}]}